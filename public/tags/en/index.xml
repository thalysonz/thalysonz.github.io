<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>en on thalysonz</title>
    <link>https://thalysonz.github.io/tags/en/</link>
    <description>Recent content in en on thalysonz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thalysonz.github.io/tags/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Cache Deception: Some Real Cases</title>
      <link>https://thalysonz.github.io/posts/web-cache-deception/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://thalysonz.github.io/posts/web-cache-deception/</guid>
      <description>Web Cache Deception (WCD) Web Cache Deception (WCD) is an attack in which an attacker tricks a cache proxy into improperly storing private information sent over the Internet, gaining unauthorized access to these cached data. It was proposed by Omer Gil, a security researcher, in 2017.&#xA;Introduction Many are already aware of what Web Cache Deception is and how its exploitation works, so today I wanted to bring something different and show some real scenarios that I reported in 2023 in bug bounty programs.</description>
    </item>
    <item>
      <title>Tips for Analyzing Obfuscated Code</title>
      <link>https://thalysonz.github.io/posts/tips-for-analyzing-obfuscated-code/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://thalysonz.github.io/posts/tips-for-analyzing-obfuscated-code/</guid>
      <description>Introduction I have completed my static analysis of the PixPirate malware code. A significant part of this period was dedicated to deobfuscating the JavaScript files used by the malware, which made considerable efforts to complicate analysis by third parties.&#xA;As can be seen in the images below, all files in &amp;ldquo;project.zip&amp;rdquo;, executed by the malware using AutoJS (a tool responsible for handling JS automation), are obfuscated. Therefore, I decided to take advantage of my current focus on this topic and provide some tips that might be helpful if you encounter any obfuscated JavaScript code in the future.</description>
    </item>
  </channel>
</rss>
