<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on thalysonz</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on thalysonz</description>
    <generator>Hugo</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 26 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring mTLS in Mobile Applications</title>
      <link>http://localhost:1313/posts/mtls-mobile/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mtls-mobile/</guid>
      <description>Exploring mTLS in Mobile Applications Today, I will present a case study on mTLS that I conducted in a private bug bounty program.&#xA;mTLS (Mutual TLS) is a method of mutual authentication that ensures both parties in a network connection are who they claim to be. In an mTLS connection, the server verifies the client&amp;rsquo;s certificate, and the client verifies the server&amp;rsquo;s certificate. If a proxy like Burp Suite were used in this connection, the server would reject the connection.</description>
    </item>
    <item>
      <title>DeepLink Misconfiguration: Accessing PIX and Account Data</title>
      <link>http://localhost:1313/posts/deeplink-misconfiguration-pix/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deeplink-misconfiguration-pix/</guid>
      <description>While analyzing an application, I noticed that some deeplink calls contained the &amp;ldquo;path&amp;rdquo; parameter, and this parameter was being used to define the path of the WebView that the application was accessing.&#xA;Controlling the Path with Deeplinks So, we could control the path that the WebView was loading, but what if there was an &amp;ldquo;@&amp;rdquo; in the path parameter?&#xA;If we try to put an &amp;ldquo;@&amp;rdquo; in the path parameter, we can control the site that will be loaded in the application&amp;rsquo;s WebView because instead of accessing https://help-webview.</description>
    </item>
    <item>
      <title>Race Condition: Some Real Cases</title>
      <link>http://localhost:1313/posts/race-condition-real-cases/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/race-condition-real-cases/</guid>
      <description>Understanding Race Conditions Race conditions are a prevalent vulnerability closely linked to business logic flaws in web applications. They arise when websites process concurrent requests without proper safeguards, leading to multiple threads interacting with the same data simultaneously. This interaction can cause &amp;ldquo;collisions,&amp;rdquo; resulting in unintended application behavior. Malicious actors exploit these race conditions by carefully timing their requests to create intentional collisions for nefarious purposes.&#xA;For those interested in diving deeper into race conditions or practicing in controlled environments, numerous online labs and resources are available.</description>
    </item>
    <item>
      <title>Web Cache Deception: Some Real Cases</title>
      <link>http://localhost:1313/posts/web-cache-deception/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/web-cache-deception/</guid>
      <description>Web Cache Deception (WCD) Web Cache Deception (WCD) is an attack in which an attacker tricks a cache proxy into improperly storing private information sent over the Internet, gaining unauthorized access to these cached data. It was proposed by Omer Gil, a security researcher, in 2017.&#xA;Introduction Many are already aware of what Web Cache Deception is and how its exploitation works, so today I wanted to bring something different and show some real scenarios that I reported in 2023 in bug bounty programs.</description>
    </item>
    <item>
      <title>Tips for Analyzing Obfuscated Code</title>
      <link>http://localhost:1313/posts/tips-for-analyzing-obfuscated-code/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/tips-for-analyzing-obfuscated-code/</guid>
      <description>Introduction I have completed my static analysis of the PixPirate malware code. A significant part of this period was dedicated to deobfuscating the JavaScript files used by the malware, which made considerable efforts to complicate analysis by third parties.&#xA;As can be seen in the images below, all files in &amp;ldquo;project.zip&amp;rdquo;, executed by the malware using AutoJS (a tool responsible for handling JS automation), are obfuscated. Therefore, I decided to take advantage of my current focus on this topic and provide some tips that might be helpful if you encounter any obfuscated JavaScript code in the future.</description>
    </item>
    <item>
      <title>Dicas para análise de código ofuscado</title>
      <link>http://localhost:1313/posts/dicas-para-analise-de-codigo-obfuscado/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/dicas-para-analise-de-codigo-obfuscado/</guid>
      <description>Introdução Finalizei minha análise estática no código do malware PixPirate. Uma parte significativa desse período foi dedicada a desofuscar os arquivos JavaScript utilizados pelo malware, que se empenhou bastante em dificultar a análise por parte de terceiros.&#xA;Como pode ser visto nas imagens abaixo, todos os arquivos presentes em &amp;ldquo;project.zip&amp;rdquo;, que é executado pelo malware usando o AutoJS (ferramenta responsável por cuidar da automação JS), estão ofuscados. Então, decidi aproveitar que estou focado nisso e trazer algumas dicas que podem ajudar caso vocês se deparem com algum código JavaScript obfuscado de agora em diante.</description>
    </item>
  </channel>
</rss>
